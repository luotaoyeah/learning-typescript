/* eslint-disable prefer-const */
describe('src/doc/whats-new/ts@3.4/const-assertion.ts', () => {
  it('01', () => {
    /*----------------------------------------------------------------------------------------------------
     * 很多时候的类型推断会自动扩展类型，如下的类型被推断为 string，
     *----------------------------------------------------------------------------------------------------*/
    let v01 = '666'; // 类型为 string

    /*----------------------------------------------------------------------------------------------------
     * 可以显式标注类型来阻止类型扩展（type widening），
     *----------------------------------------------------------------------------------------------------*/
    let v02: '666' = '666'; // 类型为 '666'

    /*----------------------------------------------------------------------------------------------------
     * 也可以通过 const assertion 来阻止类型扩展，
     * const assertion 是一种特殊形式的 type assertion，
     *----------------------------------------------------------------------------------------------------*/
    let v03 = '666' as const; // 类型为 '666'
  });

  it('02', () => {
    /*----------------------------------------------------------------------------------------------------
     * 对于 object/array 来说，const assertion 还会将它们标注为 readonly，
     *----------------------------------------------------------------------------------------------------*/
    let obj01 = <const>{ p01: 666, p02: '888' }; // { readonly p01: 666, readonly p02: "888" }
    let arr01 = <const>[666, '888']; // readonly [ 666, "888" ]
  });

  it('03', () => {
    /*----------------------------------------------------------------------------------------------------
     * const assertion 只能用在 literal 后面，
     *----------------------------------------------------------------------------------------------------*/

    // TS1355: a 'const' assertions can only be applied to references to enum members, or string, number, boolean, array, or object literals.
    // let v01 = (Math.random() < 0.5 ? 0 : 1) as const;

    // 下面的用法是正确的
    let v02 = Math.random() < 0.5 ? (0 as const) : (1 as const); // 类型为 0 | 1
  });
});
