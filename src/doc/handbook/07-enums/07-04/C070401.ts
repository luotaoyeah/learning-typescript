/*
 * Enums
 *     Computed and constant members
 */

console.log("\n-------------------------------------------------- 01");
{
  /*
   * 根据成员的值，枚举成员可以分为'计算成员（computed member）'和'常量成员（constant member）'；
   * 满足以下条件的为常量成员：
   *     1. 是第一个成员，且没有初始值，则它的值为 0；
   *     2. 位于数字常量成员的后面，且没有初始值（自增）；
   *     3. 使用常量枚举表达式（constant enum expression）进行初始化；
   *
   *         常量枚举表达式包括：
   *             1. string literal，number literal；
   *             2. 对其他常量成员的引用，可以是其他的枚举的成员；
   *             3. 使用()将常量枚举表达式包裹起来；
   *             4. 对常量枚举表达式使用 +，-，~ 一元操作符；
   *             5. 对唱了枚举表达式使用 +, -, *, /, %, <<, >>, >>>, &, |, ^ 二元操作符；
   */
}

console.log("\n-------------------------------------------------- 02");
{
  /*
   * A 是第一个成员，且没有初始值，则 A 是一个常量成员，值为 0；
   */
  enum enum01 {
    A
  }

  console.log(enum01.A); // 0
}

console.log("\n-------------------------------------------------- 03");
{
  /*
   * B 位于 A 后面，且 A 是一个数字常量成员，则 B 是一个常量成员，值为：A 的值 + 1；
   */
  enum enum01 {
    A = 3,
    B
  }

  console.log(enum01.B); // 4
}

console.log("\n-------------------------------------------------- 04");
{
  enum enum01 {
    A
  }

  /*
   * enum01.A 是一个常量枚举表达式，enum01.A + 3 也是一个常量枚举表达式，
   * B 使用 enum01.A + 3 进行初始化，所以 B 是一个常量成员；
   */
  enum enum02 {
    A = 3,
    B = enum01.A + 3
  }
}

console.log("\n-------------------------------------------------- 05");
{
  /*
   * 其他的都是计算成员；
   */
  enum enum01 {
    A = [].length
  }

  console.log(enum01.A);
}
